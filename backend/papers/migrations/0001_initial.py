# Generated by Django 4.2.23 on 2025-07-26 05:01

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                (
                    "affiliation",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                ("orcid_id", models.CharField(blank=True, max_length=50, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Collection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("created_by", models.CharField(blank=True, max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Paper",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.TextField()),
                ("abstract", models.TextField(blank=True)),
                ("publication_date", models.DateField()),
                (
                    "arxiv_id",
                    models.CharField(blank=True, max_length=50, null=True, unique=True),
                ),
                (
                    "pubmed_id",
                    models.CharField(blank=True, max_length=50, null=True, unique=True),
                ),
                (
                    "doi",
                    models.CharField(
                        blank=True, max_length=200, null=True, unique=True
                    ),
                ),
                ("journal", models.CharField(blank=True, max_length=300, null=True)),
                ("citations", models.IntegerField(default=0)),
                ("keywords", models.JSONField(blank=True, default=list)),
                (
                    "institution_affiliations",
                    models.JSONField(blank=True, default=list),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("arxiv", "ArXiv"),
                            ("pubmed", "PubMed"),
                            ("semantic_scholar", "Semantic Scholar"),
                            ("manual", "Manual Entry"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="PaperAuthor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField()),
                ("is_corresponding", models.BooleanField(default=False)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="papers.author"
                    ),
                ),
                (
                    "paper",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="papers.paper"
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.AddField(
            model_name="paper",
            name="authors",
            field=models.ManyToManyField(
                through="papers.PaperAuthor", to="papers.author"
            ),
        ),
        migrations.CreateModel(
            name="CollectionTask",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("task_type", models.CharField(max_length=50)),
                ("parameters", models.JSONField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("papers_collected", models.PositiveIntegerField(default=0)),
                ("error_message", models.TextField(blank=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "collection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="papers.collection",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="collection",
            name="papers",
            field=models.ManyToManyField(blank=True, to="papers.paper"),
        ),
        migrations.CreateModel(
            name="Collaboration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("paper_count", models.PositiveIntegerField(default=1)),
                ("first_collaboration", models.DateField()),
                ("last_collaboration", models.DateField()),
                (
                    "author1",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collaborations_as_author1",
                        to="papers.author",
                    ),
                ),
                (
                    "author2",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collaborations_as_author2",
                        to="papers.author",
                    ),
                ),
                ("papers", models.ManyToManyField(blank=True, to="papers.paper")),
            ],
        ),
        migrations.AddIndex(
            model_name="author",
            index=models.Index(fields=["name"], name="papers_auth_name_dda33e_idx"),
        ),
        migrations.AddIndex(
            model_name="author",
            index=models.Index(
                fields=["orcid_id"], name="papers_auth_orcid_i_c51cc6_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="paperauthor",
            unique_together={("paper", "author")},
        ),
        migrations.AddIndex(
            model_name="paper",
            index=models.Index(
                fields=["publication_date"], name="papers_pape_publica_1c177f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paper",
            index=models.Index(fields=["source"], name="papers_pape_source_bf3fce_idx"),
        ),
        migrations.AddIndex(
            model_name="paper",
            index=models.Index(
                fields=["arxiv_id"], name="papers_pape_arxiv_i_571507_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paper",
            index=models.Index(
                fields=["pubmed_id"], name="papers_pape_pubmed__5612c1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paper",
            index=models.Index(fields=["doi"], name="papers_pape_doi_905538_idx"),
        ),
        migrations.AddIndex(
            model_name="paper",
            index=models.Index(
                fields=["citations"], name="papers_pape_citatio_bb00a8_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="paper",
            unique_together={("title", "publication_date")},
        ),
        migrations.AddIndex(
            model_name="collaboration",
            index=models.Index(
                fields=["paper_count"], name="papers_coll_paper_c_89a67f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="collaboration",
            index=models.Index(
                fields=["first_collaboration"], name="papers_coll_first_c_b06418_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="collaboration",
            unique_together={("author1", "author2")},
        ),
    ]
