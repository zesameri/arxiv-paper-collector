version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: arxiv_papers
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for Caching (optional but good for future)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Django Backend
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - static_volume:/app/backend/staticfiles
    environment:
      - DEBUG=True
      - POSTGRES_DB=arxiv_papers
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - PUBMED_EMAIL=your-email@example.com
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "cd backend &&
             poetry run python manage.py migrate &&
             poetry run python manage.py collectstatic --noinput &&
             poetry run python manage.py runserver 0.0.0.0:8000"

  # Frontend (placeholder for future React/Vue app)
  frontend:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    command: sh -c "npm install && npm start"
    profiles:
      - frontend  # Only start with --profile frontend

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/static
    depends_on:
      - backend
    profiles:
      - nginx  # Only start with --profile nginx

volumes:
  postgres_data:
  redis_data:
  static_volume: 